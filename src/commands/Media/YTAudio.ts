import { MessageType } from '@adiwajshing/baileys'
import MessageHandler from '../../Handlers/MessageHandler'
import BaseCommand from '../../lib/BaseCommand'
import WAClient from '../../lib/WAClient'
import YT from '../../lib/YT'
import { ISimplifiedMessage } from '../../typings'

export default class Command extends BaseCommand {
    constructor(client: WAClient, handler: MessageHandler) {
        super(client, handler, {
            command: 'yta',
            description: '‡∑É‡∂¥‡∂∫‡∂± ‡∂Ω‡∂Ø YouTube ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫ ‡∂∏‡∑è‡∂∞‡∑ä‚Äç‡∂∫‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∫‡∑í',
            category: 'media',
            aliases: ['ytaudio'],
            usage: `${client.config.prefix}ytv [URL]`,
            baseXp: 20
        })
    }

    run = async (M: ISimplifiedMessage): Promise<void> => {
        if (!M.urls.length) return void M.reply('üîé ‡∂î‡∂∂‡∂ß ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ Youtube ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±')
        const audio = new YT(M.urls[0], 'audio')
        if (!audio.validateURL()) return void M.reply(`‚öì ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±`)
        M.reply('‚ù§ ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂ë‡∑Ä‡∂∏‡∑í‡∂±‡∑ä...')
        M.reply(await audio.getBuffer(), MessageType.audio).catch((reason: Error) =>
            M.reply(`‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∂ß‡∂ú‡∑ê‡∂´‡∑î‡∂±‡∑í, ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä: ${reason}`)
        )
    }
}
