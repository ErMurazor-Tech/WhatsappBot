import { MessageType } from '@adiwajshing/baileys'
import MessageHandler from '../../Handlers/MessageHandler'
import BaseCommand from '../../lib/BaseCommand'
import request from '../../lib/request'
import Spotify from '../../lib/Spotify'
import WAClient from '../../lib/WAClient'
import { ISimplifiedMessage } from '../../typings'

export default class Command extends BaseCommand {
    constructor(client: WAClient, handler: MessageHandler) {
        super(client, handler, {
            command: 'spotify',
            description: '‡∂î‡∂∂ ‡∑É‡∑ê‡∂¥‡∂∫‡∑ñ Spotify ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂á‡∂≠‡∑í ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∫‡∑í',
            category: 'media',
            usage: `${client.config.prefix}spotify [URL]`,
            baseXp: 20,
            aliases: ['sp']
        })
    }

    run = async (M: ISimplifiedMessage): Promise<void> => {
        if (!M.urls.length) return void M.reply(`üîé ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ Spotify ‡∂ú‡∑ì‡∂≠‡∂∫‡∑ô‡∑Ñ‡∑í ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±`)
        const url = M.urls[0]
        const track = new Spotify(url)
        const info = await track.getInfo()
        if (info.error) return void M.reply(`‚öì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä : ${url}. ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂±‡∑í‡∑Ä‡∂ª‡∑ê‡∂Ø‡∑í‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑ú‡∂ß ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±`)
        const caption = `üéß *Title:* ${info.name || ''}\nüé§ *Artists:* ${(info.artists || []).join(',')}\nüíΩ *Album:* ${
            info.album_name
        }\nüìÜ *Release Date:* ${info.release_date || ''}`
        M.reply(
            await request.buffer(info?.cover_url as string),
            MessageType.image,
            undefined,
            undefined,
            caption
        ).catch((reason: any) => M.reply(`‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∂ß‡∂ú‡∑ê‡∂´‡∑î‡∂±‡∑í, ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä: ${reason}`))
        M.reply(await track.getAudio(), MessageType.audio).catch((reason: any) =>
            M.reply(`‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∂ß‡∂ú‡∑ê‡∂´‡∑î‡∂±‡∑í, ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä: ${reason}`)
        )
    }
}
